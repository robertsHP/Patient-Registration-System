version: '3'
services:
  db:
    image: postgres
    # restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./db/data:/var/lib/postgresql/data
      - ./db/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
    networks:
      - pern-app
  pgadmin:
    image: dpage/pgadmin4
    # restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - ./db/pgadmin:/root/.pgadmin
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
    depends_on:
      - db
    networks:
      - pern-app
  server:
    build: ./server
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - ./server:/app
      - /app/node_modules
    env_file:
      - ./.env
    depends_on:
      - db
    networks:
      - pern-app
  client:
    build: ./client
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    volumes:
      - ./client:/app
      - /app/node_modules
    working_dir: /app
    env_file:
      - ./.env
    depends_on:
      - db
      - server
    networks:
      - pern-app
networks:
  pern-app:
    driver: bridge
# volumes:
#   postgres:
#     driver: local